---
- name: stop coco service
  shell: |
    ps -ef |grep cocod|awk '{print $2}'|xargs kill -9
  ignore_errors: true

- name: rm coco directory
  file:
    path: "{{item}}"
    state: absent
  with_items: 
      - "{{jms.APP_DIR}}/coco"
      - "{{jms.APP_DIR}}/coco-master.zip"

- name: download coco package
  shell:
    wget -O coco-master.zip  "{{coco_repo}}"
  args:
    chdir: "{{jms.APP_DIR}}/"
  register: coco_dl
  until: coco_dl.rc == 0 #判断条件包含特定字符串cat
  retries: 5  #重试5次
  delay: 5    #间隔5s

- name: unarchive coco package
  unarchive:
    src: "{{jms.APP_DIR}}/coco-master.zip"
    dest: "{{jms.APP_DIR}}/"
    remote_src: yes
    mode: 0755

- name: rename coco directory
  shell: |
    mv coco-master  coco
  args:
    chdir: "{{jms.APP_DIR}}/"



- name: install coco rpm requirements
  shell: |
    yum -y  install $(cat rpm_requirements.txt)
  args:
    chdir: "{{jms.APP_DIR}}/coco/requirements"

- name: install coco python requirements
  shell: |
    source /opt/py/bin/activate;
    pip install -r requirements.txt
  args:
    chdir: "{{jms.APP_DIR}}/coco/requirements"
  register: coco_pip
  until: coco_pip.rc == 0 #判断条件包含特定字符串cat
  retries: 5  #重试5次
  delay: 5    #间隔5s


- name: create coco log directory
  file:
    path: "{{jms.APP_DIR}}/coco/{{item}}"
    owner: "{{manager_user}}"
    group: "{{manager_group}}"
    state: directory
    mode: 0755
  with_items:
    - keys
    - logs

- name: create coco config
  copy:
    src: "{{jms.APP_DIR}}/coco/conf_example.py"
    dest: "{{jms.APP_DIR}}/coco/conf.py"
    remote_src: yes

- name: create radom coco register id
  shell: |
    date  +%H%M%S
  register: coco_id

- name: config coco register name
  lineinfile:
    path: "{{jms.APP_DIR}}/coco/conf.py"
    regexp: ' # NAME = '
    line: '    NAME = "coco_{{ansible_hostname}}_{{coco_id.stdout}}"'

- name: config coco ssh port
  lineinfile:
    path: "{{jms.APP_DIR}}/coco/conf.py"
    regexp: 'SSHD_PORT = '
    line: '    SSHD_PORT = {{coco.SSHD_PORT}}'


- name: config  BOOTSTRAP_TOKEN
  lineinfile:
    path:  "{{jms.APP_DIR}}/coco/conf.py"
    regexp: "BOOTSTRAP_TOKEN =(.*)"
    line: "    BOOTSTRAP_TOKEN = '{{AC.bootstrap_token}}'"

- name: config coco CORE_HOST ip
  lineinfile:
    path: "{{jms.APP_DIR}}/coco/conf.py"
    regexp: ' # CORE_HOST = '
    line: "    CORE_HOST = '{{coco.CORE_HOST}}'"


- name: config coco sftp config
  lineinfile:
    path: "{{jms.APP_DIR}}/coco/coco/sftp.py"
    regexp: "root = '/tmp'"
    line: "    root = '/home'"

- name: chown coco directory
  file:
    path: "{{jms.APP_DIR}}/coco"
    state: directory
    owner: "{{manager_user}}"
    group: "{{manager_group}}"
    recurse: yes
    mode: 0755


- name: wait for jumpserver start
  wait_for:
      host: "{{groups['jumpserver'][0]}}"
      port: "{{jms.HTTP_LISTEN_PORT}}"
      timeout: 300


- name: start  coco service
  shell: |
    source /opt/py/bin/activate;
    set -m;./cocod restart -d
  args:
    chdir: "{{jms.APP_DIR}}/coco"
  become: yes
  become_user: "{{manager_user}}"


- name: copy coco start/stop scripts
  template:
    src: "{{item}}"
    dest: "{{jms.APP_DIR}}/coco/"
    owner: "{{manager_user}}"
    group: "{{manager_group}}"
    mode: 0755
  with_items:
    - coco_start.sh
    - coco_stop.sh
