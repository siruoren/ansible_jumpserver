---
- name: stop jumpserver service
  shell: |
    ps -ef |grep {{item}} |grep -v grep |awk '{print $2}'|xargs kill -9
  with_items:
    - "jumpserver.wsgi"
    - "{{jms.APP_DIR}}/jumpserver"
  ignore_errors: true

- name: rm jumpserver directory
  file:
    path: "{{item}}"
    state: absent
  with_items:
     - "{{jms.APP_DIR}}/jumpserver"
     - "{{jms.APP_DIR}}/jumpserver-master.zip"

- name: download jumpserver package
  get_url:
    url:  "{{jumpserver_repo}}"
    dest: "{{jms.APP_DIR}}/"
    mode: 0755

- name: unarchive jumpserver package
  unarchive:
    src: "{{jms.APP_DIR}}/jumpserver-master.zip"
    dest: "{{jms.APP_DIR}}/"
    remote_src: yes
    mode: 0755

- name: rename jumpserver directory
  shell: |
    mv jumpserver-master  jumpserver
  args:
    chdir: "{{jms.APP_DIR}}/"



- name: create jumpserver config files
  copy:
    src: "{{jms.APP_DIR}}/jumpserver/config_example.py"
    dest: "{{jms.APP_DIR}}/jumpserver/config.py"


- name: copy  create mysql database scripts
  template:
    src: jumpserver.sql
    dest: /tmp/jumpserver.sql

- name: create mysql jumpserver database
  shell: |
    mysql -u{{mariadb.USER}} -p{{mariadb.PASSWORD}} -h{{mariadb.HOST}} < /tmp/jumpserver.sql
  ignore_errors: yes


- name: config  default jumpserver web port
  lineinfile:
    path:  "{{jms.APP_DIR}}/jumpserver/config.py"
    regexp: "HTTP_LISTEN_PORT(.*)"
    line: '    HTTP_LISTEN_PORT = {{jms.HTTP_LISTEN_PORT}}'


- name: clear default jumpserver config
  lineinfile:
    path:  "{{jms.APP_DIR}}/jumpserver/config.py"
    regexp: "{{item}}"
    state: absent
  with_items:
    - 'DB_ENGINE =(.*)'
    - 'DB_NAME =(.*)'
    - 'DB_HOST =(.*)'
    - 'DB_PORT =(.*)'
    - 'DB_USER =(.*)'
    - 'DB_PASSWORD = (.*)'



- name: config jumpserver database config
  blockinfile:
    path: "{{jms.APP_DIR}}/jumpserver/config.py"
    insertafter: "class Config:"
    block: |
      # MySQL or postgres setting like:
          DB_ENGINE ='{{jms.DB_ENGINE}}'
          DB_HOST = '{{jms.DB_HOST}}'
          DB_PORT = {{jms.DB_PORT}}
          DB_USER = '{{jms.DB_USER}}'
          DB_PASSWORD = '{{jms.DB_PASSWORD}}'
          DB_NAME = '{{jms.DB_NAME}}'

- name: create  BOOTSTRAP_TOKEN
  shell:
    echo {{ansible_machine_id}}
  register: bootstrap_token 
  connection: local

- name: config  BOOTSTRAP_TOKEN
  lineinfile:
    path:  "{{jms.APP_DIR}}/jumpserver/config.py"
    insertafter: "class Config:"
    regexp: "BOOTSTRAP_TOKEN =(.*)"
    line: "    BOOTSTRAP_TOKEN = '{{bootstrap_token.stdout}}'"



- name: install jumpserver rpm  requrements
  shell: |
    yum install -y $(cat rpm_requirements.txt)
  args:
    chdir: "{{jms.APP_DIR}}/jumpserver/requirements/"

- name: get python-gssapi version
  shell: |
    cat {{jms.APP_DIR}}/jumpserver/requirements/requirements.txt |grep python-gssapi
  register: python_gssapi

- name: update jumpserver pip requrements
  lineinfile:
    path: "{{jms.APP_DIR}}/jumpserver/requirements/requirements.txt"
    regexp: "python-gssapi(.*)"
    state: absent

- name: install jumpserver pip requrements
  shell: |
    source /opt/py/bin/activate;
    pip install -r requirements.txt;
  args:
    chdir: "{{jms.APP_DIR}}/jumpserver/requirements/"

- name: install  python-gssapi
  shell: |
    source /opt/py/bin/activate;
    pip install  {{item}}
  args:
    chdir: "{{jms.APP_DIR}}/jumpserver/requirements/"
  with_items:
    - "{{python_gssapi.stdout}}"



- name: start migrations mariadb
  shell: |
     source /opt/py/bin/activate;
     sh make_migrations.sh
  args:
    chdir: "{{jms.APP_DIR}}/jumpserver/utils"

- name: chown {{manager_user}}
  file:
    path: "{{jms.APP_DIR}}/jumpserver"
    state: directory
    owner: "{{manager_user}}"
    group: "{{manager_group}}"
    recurse: yes
    mode: 0755


- name: start jumpserver
  shell: |
    source /opt/py/bin/activate;
    set -m;./jms restart all -d
  register: jumpserver_status
  until: jumpserver_status.stdout.find("celery is running") != -1
  retries: 5  #重试5次
  delay: 10    #间隔5s
  args:
    chdir: "{{jms.APP_DIR}}/jumpserver"
  become: yes
  become_user: "{{manager_user}}"


- name: copy jumpserver start/stop scripts
  template:
    src: "{{item}}"
    dest: "{{jms.APP_DIR}}/jumpserver/"
    owner: "{{manager_user}}"
    group: "{{manager_group}}"
    mode: 0755
  with_items:
    - jumpserver_start.sh
    - jumpserver_stop.sh
